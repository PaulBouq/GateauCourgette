// --------------------------------------------------------
// BE Fiacre : Architecture SCADA Sécurisée
// Paul BOUQUET - Cédric DELAUNAY - Mathieu LOGARIO
// 15 Février 2019
// --------------------------------------------------------

const Nb_LC     : nat is 2
const SIZE_FIFO : nat is 20

type ID is union
  ADMIN
| GC_OWNER
| LC1_OWNER
| LC2_OWNER
| UNKNOWN
| GC
| Network
| LC1
| LC2
| ID_NUL
| ID_END
| FU
| NUL
end union

type OPERATION is union
  READ
| WRITE
| ACK
| NACK
| OP_NUL
end union

type SIGNATURE is record
    CC_SIG  : ID,
    COM_SIG : ID,
    FU_SIG  : ID
end record

type REQUEST is record
    source      : ID,
    target      : ID,
    oper        : OPERATION,
    signature   : SIGNATURE,
    obj         : int,
    isAck       : OPERATION
end record

type t_fifo is queue SIZE_FIFO of REQUEST

// --------------------------------------------------------
//              Déclaration des constantes
// --------------------------------------------------------

const SIG_NULL : SIGNATURE is {CC_SIG = NUL, COM_SIG = NUL, FU_SIG = NUL}  // Définition d'une signature vide
const SIG_FULL : SIGNATURE is {CC_SIG = GC, COM_SIG = Network, FU_SIG = FU} // Définition de la signature complète
const SIG_1    : SIGNATURE is {CC_SIG = GC, COM_SIG = NUL, FU_SIG = NUL}

const REQ_NUL  : REQUEST is {source = ID_NUL, target = ID_NUL, oper = OP_NUL, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requête vide vers ID_NUL
const REQ_END  : REQUEST is {source = ID_NUL, target = ID_END, oper = OP_NUL, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requête vide vers ID_END

// Requetes en lecture et écriture de LC1_OWNER
const LC1_OWNER_WRITE_LC1 : REQUEST is {source = LC1_OWNER, target = LC1, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur LC1 par LC1_OWNER
const LC1_OWNER_READ_LC1  : REQUEST is {source = LC1_OWNER, target = LC1, oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete de lecture sur LC1 par LC1_OWNER
const LC1_OWNER_WRITE_LC2 : REQUEST is {source = LC1_OWNER, target = LC2, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur LC2 par LC1_OWNER
const LC1_OWNER_READ_LC2  : REQUEST is {source = LC1_OWNER, target = LC2, oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete de lecture sur LC2 par LC1_OWNER
const LC1_OWNER_WRITE_GC  : REQUEST is {source = LC1_OWNER, target = GC,  oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur GC par LC1_OWNER
const LC1_OWNER_READ_GC   : REQUEST is {source = LC1_OWNER, target = GC,  oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete de lecture sur GC par LC1_OWNER

// Requetes en lecture et écriture de LC2_OWNER
const LC2_OWNER_WRITE_LC1 : REQUEST is {source = LC2_OWNER, target = LC1, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur LC1 par LC2_OWNER
const LC2_OWNER_READ_LC1  : REQUEST is {source = LC2_OWNER, target = LC1, oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur LC1 par LC2_OWNER
const LC2_OWNER_WRITE_LC2 : REQUEST is {source = LC2_OWNER, target = LC2, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur LC2 par LC2_OWNER
const LC2_OWNER_READ_LC2  : REQUEST is {source = LC2_OWNER, target = LC2, oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur LC2 par LC2_OWNER
const LC2_OWNER_WRITE_GC  : REQUEST is {source = LC2_OWNER, target = GC,  oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur GC par LC2_OWNER
const LC2_OWNER_READ_GC   : REQUEST is {source = LC2_OWNER, target = GC,  oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur GC par LC2_OWNER

// Requetes en lecture et écriture de ADMIN
const ADMIN_WRITE_LC1 : REQUEST is {source = ADMIN, target = LC1, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur LC1 par ADMIN
const ADMIN_READ_LC1  : REQUEST is {source = ADMIN, target = LC1, oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur LC1 par ADMIN
const ADMIN_WRITE_LC2 : REQUEST is {source = ADMIN, target = LC2, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur LC2 par ADMIN
const ADMIN_READ_LC2  : REQUEST is {source = ADMIN, target = LC2, oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur LC2 par ADMIN
const ADMIN_WRITE_GC  : REQUEST is {source = ADMIN, target = GC,  oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur GC par ADMIN
const ADMIN_READ_GC   : REQUEST is {source = ADMIN, target = GC,  oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur GC par ADMIN

// Requetes en lecture et écriture de GC_OWNER
const GC_OWNER_WRITE_LC1 : REQUEST is {source = GC_OWNER, target = LC1, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur LC1 par GC_OWNER
const GC_OWNER_READ_LC1  : REQUEST is {source = GC_OWNER, target = LC1, oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur LC1 par GC_OWNER
const GC_OWNER_WRITE_LC2 : REQUEST is {source = GC_OWNER, target = LC2, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur LC2 par GC_OWNER
const GC_OWNER_READ_LC2  : REQUEST is {source = GC_OWNER, target = LC2, oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur LC2 par GC_OWNER
const GC_OWNER_WRITE_GC  : REQUEST is {source = GC_OWNER, target = GC,  oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur GC par GC_OWNER
const GC_OWNER_READ_GC   : REQUEST is {source = GC_OWNER, target = GC,  oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur GC par GC_OWNER

// Requetes en lecture et écriture de UNKNOWN
const UNKNOWN_WRITE_LC1 : REQUEST is {source = UNKNOWN, target = LC1, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur LC1 par UNKNOWN
const UNKNOWN_READ_LC1  : REQUEST is {source = UNKNOWN, target = LC1, oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur LC1 par UNKNOWN
const UNKNOWN_WRITE_LC2 : REQUEST is {source = UNKNOWN, target = LC2, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur LC2 par UNKNOWN
const UNKNOWN_READ_LC2  : REQUEST is {source = UNKNOWN, target = LC2, oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur LC2 par UNKNOWN
const UNKNOWN_WRITE_GC  : REQUEST is {source = UNKNOWN, target = GC,  oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete d'écriture sur GC par UNKNOWN
const UNKNOWN_READ_GC   : REQUEST is {source = UNKNOWN, target = GC,  oper = READ,  signature = SIG_NULL, obj = 0, isAck = OP_NUL}  // Définition d'une requete lecture sur GC par UNKNOWN

// Validation des demandes d'écriture sur LC1
const ACK_WRITE_LC1_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = LC1, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur LC1 par LC1_OWNER acceptee
const ACK_WRITE_LC1_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = LC1, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur LC1 par LC2_OWNER acceptee
const ACK_WRITE_LC1_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = LC1, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur LC1 par GC_OWNER acceptee
const ACK_WRITE_LC1_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = LC1, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur LC1 par UNKNOWN acceptee
const ACK_WRITE_LC1_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = LC1, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur LC1 par ADMIN acceptee

// Refus des demandes d'écriture sur LC1
const NACK_WRITE_LC1_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = LC1, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur LC1 par LC1_OWNER refusee
const NACK_WRITE_LC1_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = LC1, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur LC1 par LC2_OWNER refusee
const NACK_WRITE_LC1_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = LC1, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur LC1 par GC_OWNER refusee
const NACK_WRITE_LC1_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = LC1, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur LC1 par UNKNOWN refusee
const NACK_WRITE_LC1_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = LC1, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur LC1 par ADMIN refusee

// Validation des demandes d'écriture sur LC2
const ACK_WRITE_LC2_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = LC2, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur LC2 par LC1_OWNER acceptee
const ACK_WRITE_LC2_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = LC2, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur LC2 par LC2_OWNER acceptee
const ACK_WRITE_LC2_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = LC2, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur LC2 par GC_OWNER acceptee
const ACK_WRITE_LC2_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = LC2, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur LC2 par UNKNOWN acceptee
const ACK_WRITE_LC2_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = LC2, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur LC2 par ADMIN acceptee

// Refus des demandes d'écriture sur LC2
const NACK_WRITE_LC2_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = LC2, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur LC2 par LC1_OWNER refusee
const NACK_WRITE_LC2_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = LC2, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur LC2 par LC2_OWNER refusee
const NACK_WRITE_LC2_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = LC2, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur LC2 par GC_OWNER refusee
const NACK_WRITE_LC2_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = LC2, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur LC2 par UNKNOWN refusee
const NACK_WRITE_LC2_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = LC2, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur LC2 par ADMIN refusee

// Validation des demandes d'écriture sur GC
const ACK_WRITE_GC_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = GC, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur GC par LC1_OWNER acceptee
const ACK_WRITE_GC_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = GC, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur GC par LC2_OWNER acceptee
const ACK_WRITE_GC_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = GC, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur GC par GC_OWNER acceptee
const ACK_WRITE_GC_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = GC, oper = WRITE, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande d'écriture sur GC par UNKNOWN acceptee
const ACK_WRITE_GC_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = GC, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = ACK}  // Demande d'écriture sur GC par ADMIN acceptee

// Refus des demandes d'écriture sur GC
const NACK_WRITE_GC_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = GC, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur GC par LC1_OWNER refusee
const NACK_WRITE_GC_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = GC, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur GC par LC2_OWNER refusee
const NACK_WRITE_GC_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = GC, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur GC par GC_OWNER refusee
const NACK_WRITE_GC_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = GC, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur GC par UNKNOWN refusee
const NACK_WRITE_GC_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = GC, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande d'écriture sur GC par ADMIN refusee

// Validation des demandes de lecture sur LC1
const ACK_READ_LC1_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = LC1, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur LC1 par LC1_OWNER acceptee
const ACK_READ_LC1_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = LC1, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur LC1 par LC2_OWNER acceptee
const ACK_READ_LC1_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = LC1, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur LC1 par GC_OWNER acceptee
const ACK_READ_LC1_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = LC1, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur LC1 par UNKNOWN acceptee
const ACK_READ_LC1_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = LC1, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur LC1 par ADMIN acceptee

// Refus des demandes de lecture sur LC1
const NACK_READ_LC1_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = LC1, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur LC1 par LC1_OWNER refusee
const NACK_READ_LC1_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = LC1, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur LC1 par LC2_OWNER refusee
const NACK_READ_LC1_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = LC1, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur LC1 par GC_OWNER refusee
const NACK_READ_LC1_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = LC1, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur LC1 par UNKNOWN refusee
const NACK_READ_LC1_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = LC1, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur LC1 par ADMIN refusee

// Validation des demandes de lecture sur LC2
const ACK_READ_LC2_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = LC2, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur LC2 par LC1_OWNER acceptee
const ACK_READ_LC2_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = LC2, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur LC2 par LC2_OWNER acceptee
const ACK_READ_LC2_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = LC2, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur LC2 par GC_OWNER acceptee
const ACK_READ_LC2_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = LC2, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur LC2 par UNKNOWN acceptee
const ACK_READ_LC2_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = LC2, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur LC2 par ADMIN acceptee

// Refus des demandes de lecture sur LC2
const NACK_READ_LC2_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = LC2, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur LC2 par LC1_OWNER refusee
const NACK_READ_LC2_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = LC2, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur LC2 par LC2_OWNER refusee
const NACK_READ_LC2_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = LC2, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur LC2 par GC_OWNER refusee
const NACK_READ_LC2_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = LC2, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur LC2 par UNKNOWN refusee
const NACK_READ_LC2_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = LC2, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur LC2 par ADMIN refusee

// Validation des demandes de lecture sur GC
const ACK_READ_GC_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = GC, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur GC par LC1_OWNER acceptee
const ACK_READ_GC_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = GC, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur GC par LC2_OWNER acceptee
const ACK_READ_GC_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = GC, oper = READ, signature = SIG_NULL, obj = 0, isAck = ACK}  // Demande de lecture sur GC par GC_OWNER acceptee
const ACK_READ_GC_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = GC, oper = READ, signature = SIG_FULL, obj = 0, isAck = ACK}  // Demande de lecture sur GC par UNKNOWN acceptee
const ACK_READ_GC_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = GC, oper = READ, signature = SIG_NULL, obj = 0, isAck = ACK}  // Demande de lecture sur GC par ADMIN acceptee

// Refus des demandes de lecture sur GC
const NACK_READ_GC_FOR_LC1_OWNER : REQUEST is {source = LC1_OWNER, target = GC, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur GC par LC1_OWNER refusee
const NACK_READ_GC_FOR_LC2_OWNER : REQUEST is {source = LC2_OWNER, target = GC, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur GC par LC2_OWNER refusee
const NACK_READ_GC_FOR_GC_OWNER  : REQUEST is {source = GC_OWNER,  target = GC, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur GC par GC_OWNER refusee
const NACK_READ_GC_FOR_UNKNOWN   : REQUEST is {source = UNKNOWN,   target = GC, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur GC par UNKNOWN refusee
const NACK_READ_GC_FOR_ADMIN     : REQUEST is {source = ADMIN,     target = GC, oper = READ, signature = SIG_NULL, obj = 0, isAck = NACK}  // Demande de lecture sur GC par ADMIN refusee

const ADMIN_WRITE_NETWORK        : REQUEST is {source = ADMIN, target = Network, oper = WRITE, signature = SIG_NULL, obj = 0, isAck = OP_NUL}
const ACK_WRITE_NETWORK_FROM_ADMIN : REQUEST is {source = ADMIN, target = Network, oper = WRITE, signature = SIG_1, obj = 0, isAck = ACK}




// --------------------------------------------------------
//              Déclaration des fonctions
// --------------------------------------------------------


//-----------------------------------------------------------------------
//    Fonction : Retourne true ou false selon les droits de l'Admin
//    Cette fonction implante les règles de droits d'accessibilite
//
//    Entree : requete de type REQUEST
//    Retour : true ou false selon les droits
//-----------------------------------------------------------------------

function hasRight_Admin (req : REQUEST) : bool is
begin
    case req.target of
        GC ->
            case req.oper of
                READ  -> return true
            |   WRITE -> return true
            end
    |   LC1 ->
            case req.oper of
                READ  -> return true
            |   WRITE -> return true
            end
    |   LC2 ->
            case req.oper of
                READ  -> return true
            |   WRITE -> return true
            end
    end;
    return false
end


//-----------------------------------------------------------------------
//    Fonction : Retourne true ou false  selon les droits de GC_OWNER
//
//    Entree : requete de type REQUEST
//-----------------------------------------------------------------------

function hasRight_GC_OWNER (req : REQUEST) : bool is
begin
    case req.target of
        GC ->
            case req.oper of
                READ  -> return true
            |   WRITE -> return true
            end
    |   LC1 ->
            case req.oper of
                READ  -> return false
            |   WRITE -> return false
            end
    |   LC2 ->
            case req.oper of
                READ  -> return false
            |   WRITE -> return false
            end
    end;
    return false
end



//-----------------------------------------------------------------------
//    Fonction : Retourne true ou false  selon les droits de LC1_OWNER
//
//    Entree : requete de type REQUEST
//-----------------------------------------------------------------------

function hasRight_LC1_OWNER (req : REQUEST) : bool is
begin
    case req.target of
        GC ->
            case req.oper of
                READ  -> return false
            |   WRITE -> return false
            end
    |   LC1 ->
            case req.oper of
                READ  -> return true
            |   WRITE -> return true
            end
    |   LC2 ->
            case req.oper of
                READ  -> return false
            |   WRITE -> return false
            end
    end;
    return false
end


//-----------------------------------------------------------------------
//    Fonction : Retourne true ou false  selon les droits de LC2_OWNER
//
//    Entree : requete de type REQUEST
//-----------------------------------------------------------------------

function hasRight_LC2_OWNER (req : REQUEST) : bool is
begin
    case req.target of
        GC ->
            case req.oper of
                READ  -> return false
            |   WRITE -> return false
            end
    |   LC1 ->
            case req.oper of
                READ  -> return false
            |   WRITE -> return false
            end
    |   LC2 ->
            case req.oper of
                READ  -> return true
            |   WRITE -> return true
            end
    end;
    return false
end


//-----------------------------------------------------------------------
//    Fonction : Retourne true ou false selon les droits de UNKNOWN
//
//    Entree : requete de type REQUEST
//-----------------------------------------------------------------------

function hasRight_Unknown (req : REQUEST) : bool is
begin
    case req.target of
        GC ->
            case req.oper of
                READ  -> return false
            |   WRITE -> return false
            end
    |   LC1 ->
            case req.oper of
                READ  -> return false
            |   WRITE -> return false
            end
    |   LC2 ->
            case req.oper of
                READ  -> return false
            |   WRITE -> return false
            end
    end;
    return false
end


//-----------------------------------------------------------------------
//    Fonction : Retourne true ou false selon les droits
//
//    Entree : requete de type REQUEST
//-----------------------------------------------------------------------

function hasRight (req : REQUEST) : bool is
begin
    case req.source of
        ADMIN     -> return (hasRight_Admin (req))
    |   GC_OWNER  -> return (hasRight_GC_OWNER (req))
    |   LC1_OWNER -> return (hasRight_LC1_OWNER (req))
    |   LC2_OWNER -> return (hasRight_LC2_OWNER (req))
    |   UNKNOWN   -> return (hasRight_Unknown (req))
    end;
    return false
end


// --------------------------------------------------------
//              Déclaration des process
// --------------------------------------------------------

// ######################################################
//                       SAP
// ######################################################
process SAP
    (&Ext_sap : read write t_fifo,
     &Sap_ext : read write t_fifo,
     &Int_sap : read write t_fifo,
     &Sap_int : read write t_fifo,
     &CP_sap  : read write t_fifo,
     &Sap_cp  : read write t_fifo,
     stage_id: ID)

is

states
    Idle,
    rec_from_ext,
    rec_from_int,
    rec_from_cp,
    send_to_ext,
    send_to_int,
    send_to_cp,
    sign

var
    req : REQUEST

init
    req := REQ_NUL;
    to Idle

from Idle
    if(empty Ext_sap and empty Int_sap and empty CP_sap) then   //All fifo are empty
        loop end;
    if((empty CP_sap) = false) then                 //CP fifo is not empty
        to rec_from_cp end;
    if((empty Int_sap) = false) then                  //interior fifo not empty
        to rec_from_int end;
    if((empty Ext_sap) = false) then                                                      //exterior fifo not empty
        to rec_from_ext
    end;
    to Idle

from rec_from_cp
    req     := (first CP_sap);
    CP_sap  := (dequeue CP_sap);
    if(req.target = stage_id) then
        to send_to_ext
    elsif(req.isAck = ACK) then                           
        to send_to_int
    else
        to send_to_ext
    end;
    to Idle

from rec_from_ext
    req     := (first Ext_sap);
    Ext_sap := (dequeue Ext_sap);
    if(stage_id = GC) then
        to send_to_cp
    elsif(stage_id = Network) then
        if(req.signature.CC_SIG = GC) then
            to send_to_cp
        else
            to send_to_ext
        end;
        to Idle
    elsif(stage_id = FU) then
        if(req.signature.CC_SIG = GC and req.signature.COM_SIG = Network) then
            to send_to_cp
        else
            to send_to_ext
        end;
        to Idle
    end;
    to Idle

from rec_from_int
    req     := (first Int_sap);
    Int_sap := (dequeue Int_sap);
    if(stage_id = GC) then
        if(req.signature.COM_SIG <> Network or req.signature.FU_SIG <> FU or req.signature.CC_SIG <> GC) then
            req.isAck := NACK
        end;
        to send_to_ext
    elsif(stage_id = Network) then
        if(req.signature.COM_SIG <> Network or req.signature.FU_SIG <> FU or req.signature.CC_SIG <> GC) then
            req.isAck := NACK
        end;
        to send_to_ext
    elsif(stage_id = FU) then
        if(req.signature.COM_SIG <> Network or req.signature.FU_SIG <> FU or req.signature.CC_SIG <> GC) then
            req.isAck := NACK
        end;
        to send_to_ext
    end;
    to Idle

from send_to_cp
    if(full Sap_cp) then loop end;
    Sap_cp := enqueue(Sap_cp, req);
    to Idle

from send_to_int
    if(stage_id = GC) then
        req.signature.CC_SIG := GC
    elsif(stage_id = Network) then
        req.signature.COM_SIG := Network
    elsif(stage_id = FU) then
        req.signature.FU_SIG := FU
    end;
    if(full Sap_int) then loop end;
    Sap_int := enqueue(Sap_int, req);
    to Idle

from send_to_ext
    if(full Sap_ext) then loop end;
    Sap_ext := enqueue(Sap_ext, req);
    to Idle



// ######################################################
//                    Firewall
// ######################################################

process Firewall (&CP_Fwl : read write t_fifo,
                  &Fwl_CP : read write t_fifo) is
states idle, sendResponse

var req : REQUEST


init
    req := REQ_NUL;
    to idle

from idle
    if (empty CP_Fwl) then loop end;
    req := first CP_Fwl;
    CP_Fwl := dequeue(CP_Fwl);
    to sendResponse

from sendResponse
    if (hasRight(req) = true) then
        req.isAck := ACK
    else
        req.isAck := NACK
    end;
    if (full Fwl_CP) then loop end;
    Fwl_CP := enqueue(Fwl_CP, req);
    to idle

function doCheck_GC(req : REQUEST) : bool is
begin
    case req.obj of
        0 -> return true
    |   1 -> return false
    |   2 -> return false
    |   3 -> return false
    end;
    return false
end

function doCheck_Net(req : REQUEST) : bool is
begin
    case req.obj of
        0 -> return true
    |   1 -> return true
    |   2 -> return false
    |   3 -> return false
    end;
    return false
end

function doCheck_LC1(req : REQUEST) : bool is
begin
    case req.obj of
        0 -> return true
    |   1 -> return false
    |   2 -> return true
    |   3 -> return false
    end;
    return false
end

function doCheck_LC2(req : REQUEST) : bool is
begin
    case req.obj of
        0 -> return true
    |   1 -> return false
    |   2 -> return false
    |   3 -> return true
    end;
    return false
end
    
function doCheck(req : REQUEST) : bool is
begin
    case req.target of
        UNKNOWN     -> return false
    |   GC          -> return (doCheck_GC(req))
    |   Network     -> return (doCheck_Net(req))
    |   LC1         -> return (doCheck_LC1(req))
    |   LC2         -> return (doCheck_LC2(req))
    end;
    return false
end

// ######################################################
//                    Checkpoint
// ######################################################

process Checkpoint(&outputSAP  : read write t_fifo,
                        &inputSAP   : read write t_fifo,
                        &outputAUTH : read write t_fifo,
                        &inputAUTH  : read write t_fifo) is
states
    idle, check, forwardAUTH, forwardSAP

var
    req         : REQUEST,
    SAPorAUTH   : bool

init
    req := REQ_NUL;
    to idle

from idle
    if(empty inputSAP and empty inputAUTH) then
        loop end;
    if((empty inputSAP) = false) then
        req         := first inputSAP;
        inputSAP    := dequeue(inputSAP);
        to check
    end;
    if((empty inputAUTH) = false) then
        req         := first inputAUTH;
        inputAUTH   := dequeue(inputAUTH);
        to check
    end;
    to idle

from check
    SAPorAUTH := doCheck(req);
    if(SAPorAUTH = false) then
        req.isAck := NACK
    end;
    if(req.isAck = ACK or req.isAck = NACK) then
        to forwardSAP
    else
        to forwardAUTH
    end;
    to idle

from forwardSAP
    if(full outputSAP) then loop end;
    outputSAP := enqueue(outputSAP, req);
    to idle

from forwardAUTH
    if(full outputAUTH) then loop end;
    outputAUTH := enqueue(outputAUTH, req);
    to idle


// ######################################################
//                         LC
// ######################################################

process LC(&Net_LC : read write t_fifo,
           &LC_net : read write t_fifo,
           &LC_PLC1: read write t_fifo,
           &PLC1_LC: read write t_fifo,
           &LC_PLC2: read write t_fifo,
           &PLC2_LC: read write t_fifo
           )
is

states
    idle, fwTo1, fwTo2, fwToN

var
    req : REQUEST

init
    req := REQ_NUL;
    to idle

from idle
    if(empty Net_LC and empty PLC1_LC and empty PLC2_LC) then loop end;
    if((empty PLC2_LC) = false) then
      req := first PLC2_LC;
      PLC2_LC := dequeue(PLC2_LC);
      to fwToN
    end;
    if((empty PLC1_LC) = false ) then
      req := first PLC1_LC;
      PLC1_LC := dequeue(PLC1_LC);
      to fwToN 
    end;
    if((empty Net_LC) = false) then
        req := first Net_LC;
        Net_LC := dequeue(Net_LC);
        if(req.target = LC1) then to fwTo1 end;
        if(req.target = LC2) then to fwTo2 end
    end;
    to idle

from fwToN
    if(full LC_net) then loop end;
    LC_net := enqueue(LC_net, req);
    to idle

from fwTo1
    if(full LC_PLC1) then loop end;
    LC_PLC1 := enqueue(LC_PLC1, req);
    to idle

from fwTo2
    if(full LC_PLC2) then loop end;
    LC_PLC2 := enqueue(LC_PLC2, req);
    to idle


// ######################################################
//                        PLC
// ######################################################

process PLC(plc_id : ID,
            plc_obj : int,
            &outp   : read write t_fifo,
            &inp    : read write t_fifo)
is

states
    idle, dodo, forward

var
    req : REQUEST

init
    req := REQ_NUL;
    to idle

from idle
    if(empty inp) then loop end;
    req := first inp;
    inp := dequeue(inp);
    to dodo

from dodo
    if(req.target = plc_id and req.obj = plc_obj) then
        req.isAck := ACK
    else
        req.isAck := NACK
    end;
    to forward

from forward
    outp := enqueue(outp, req);
    to idle

// --------------------------------------------------------
//           Déclaration des components
// --------------------------------------------------------
    
component SCADA is

var
    GC_1                : t_fifo,
    toContext           : t_fifo,
    
    CCtr_CheckpCCtr     : t_fifo,
    CheckpCCtr_CCtr     : t_fifo,
    CheckpCCtr_fireCCtr : t_fifo,
    fireCCtr_CheckpCCtr : t_fifo,
    
    CCtr_Com            : t_fifo,
    Com_CCtr            : t_fifo,
    
    Com_CheckpCom       : t_fifo,
    CheckpCom_Com       : t_fifo,
    CheckpCom_fireCom   : t_fifo,
    fireCom_CheckpCom   : t_fifo,
    
    Com_FU              : t_fifo,
    FU_Com              : t_fifo,
    FU_CheckpFU         : t_fifo,
    CheckpFU_FU         : t_fifo,
    CheckpFU_fireFU     : t_fifo,
    fireFU_CheckpFU     : t_fifo,
    
    FU_LC               : t_fifo,
    LC_FU               : t_fifo,
    
    LC_PLC1             : t_fifo,
    PLC1_LC             : t_fifo,
    
    LC_PLC2             : t_fifo,
    PLC2_LC             : t_fifo
    
    
init
    GC_1                := {||};
    toContext           := {||};
    
    CCtr_CheckpCCtr     := {||};
    CheckpCCtr_CCtr     := {||};
    CheckpCCtr_fireCCtr := {||};
    fireCCtr_CheckpCCtr := {||};
    
    CCtr_Com            := {||};
    Com_CCtr            := {||};
    
    Com_CheckpCom       := {||};
    CheckpCom_Com       := {||};
    CheckpCom_fireCom   := {||};
    fireCom_CheckpCom   := {||};
    
    Com_FU              := {||};
    FU_Com              := {||};
    FU_CheckpFU         := {||};
    CheckpFU_FU         := {||};
    CheckpFU_fireFU     := {||};
    fireFU_CheckpFU     := {||};
    
    FU_LC               := {||};
    LC_FU               := {||};
    
    LC_PLC1             := {||};
    PLC1_LC             := {||};
                
    LC_PLC2             := {||};
    PLC2_LC             := {||}

par
    // CCtr
    SAP(&GC_1, &toContext, &Com_CCtr, &CCtr_Com, &CheckpCCtr_CCtr, &CCtr_CheckpCCtr, GC)
    ||  Checkpoint(&CheckpCCtr_CCtr, &CCtr_CheckpCCtr, &CheckpCCtr_fireCCtr, &fireCCtr_CheckpCCtr)
    ||  Firewall(&CheckpCCtr_fireCCtr, &fireCCtr_CheckpCCtr)
        
    // Com
    ||  SAP(&CCtr_Com, &Com_CCtr, &FU_Com, &Com_FU, &CheckpCom_Com, &Com_CheckpCom, Network)
    ||  Checkpoint(&CheckpCom_Com, &Com_CheckpCom, &CheckpCom_fireCom, &fireCom_CheckpCom)
    ||  Firewall(&CheckpCom_fireCom, &fireCom_CheckpCom)
        
    // FU
    ||  SAP(&Com_FU, &FU_Com, &LC_FU, &FU_LC, &CheckpFU_FU, &FU_CheckpFU, FU)
    ||  Checkpoint(&CheckpFU_FU, &FU_CheckpFU, &CheckpFU_fireFU, &fireFU_CheckpFU)
    ||  Firewall(&CheckpFU_fireFU, &fireFU_CheckpFU)
    
    ||  LC(&FU_LC, &LC_FU, &LC_PLC1, &PLC1_LC, &LC_PLC2, &PLC2_LC)
    
    ||  PLC(LC1, 0, &PLC1_LC, &LC_PLC1)
    ||  PLC(LC2, 0, &PLC2_LC, &LC_PLC2)
end

SCADA